import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { ArrowLeft, ExternalLink } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { useScrollAnimation } from "@/hooks/useScrollAnimation";

interface OrderFormProps {
  onBack: () => void;
}

const OrderForm = ({ onBack }: OrderFormProps) => {
  const [plan, setPlan] = useState<string>("webhosting");
  const [wordpress, setWordpress] = useState<boolean>(false);
  const [fullName, setFullName] = useState<string>("");
  const [email, setEmail] = useState<string>("");
  const [duration, setDuration] = useState<string>("");
  const [acceptTerms, setAcceptTerms] = useState<boolean>(false);
  const [loading, setLoading] = useState<boolean>(false);
  const navigate = useNavigate();
  const { toast } = useToast();
  
  useScrollAnimation();

  const calculateTotal = () => {
    const basePrice = plan === "pro" ? 3 : 2;
    const wordpressPrice = wordpress ? 1 : 0;
    const months = parseInt(duration) || 1;
    return (basePrice + wordpressPrice) * months;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!fullName || !email || !duration || !acceptTerms) {
      toast({
        title: "Error",
        description: "Please fill in all required fields and accept the terms.",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);

    try {
      const totalAmount = calculateTotal();
      
      const { data, error } = await supabase
        .from("orders")
        .insert({
          order_number: "", // Will be auto-generated by trigger
          plan,
          wordpress,
          full_name: fullName,
          email,
          duration: parseInt(duration),
          total_amount: totalAmount,
        })
        .select()
        .single();

      if (error) throw error;

      // Send notification email to admin
      try {
        console.log("Sending order notification email...");
        await supabase.functions.invoke('notify-new-order', {
          body: {
            orderNumber: data.order_number,
            fullName,
            email,
            plan,
            wordpress,
            duration: parseInt(duration),
            totalAmount
          }
        });
        console.log("Order notification email sent successfully");
      } catch (emailError) {
        console.error("Failed to send notification email:", emailError);
        // Don't block the order process if email fails
      }

      navigate("/order-confirmation", { 
        state: { 
          orderNumber: data.order_number,
          totalAmount,
          plan,
          wordpress,
          fullName,
          email,
          duration: parseInt(duration)
        } 
      });
    } catch (error) {
      console.error("Error creating order:", error);
      toast({
        title: "Error",
        description: "Failed to create order. Please try again.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-secondary/50 to-background">
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-2xl mx-auto">
          <div className="mb-6">
            <Button 
              variant="ghost" 
              onClick={onBack}
              className="mb-4 hover:bg-secondary"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to Home
            </Button>
            
            <h1 className="text-3xl font-bold text-foreground mb-2">Place Your Order</h1>
            <p className="text-muted-foreground">Configure your hosting plan</p>
          </div>

          <Card className="bg-card/50 backdrop-blur-sm border-border/50 animate-on-scroll hover-glow">
            <CardHeader>
              <CardTitle>Order Configuration</CardTitle>
              <CardDescription>Select your preferred hosting plan and options</CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Plan Selection */}
                <div className="space-y-3">
                  <Label className="text-base font-semibold">Select Plan</Label>
                  <RadioGroup value={plan} onValueChange={setPlan}>
                    <div className="flex items-center space-x-2 p-3 rounded-lg border border-border/50 hover:bg-secondary/50 transition-colors hover-glow">
                      <RadioGroupItem value="webhosting" id="webhosting" />
                      <Label htmlFor="webhosting" className="flex-1 cursor-pointer">
                        <div className="flex justify-between items-center">
                          <span>Webhosting</span>
                          <span className="text-sm text-muted-foreground">€2/month</span>
                        </div>
                      </Label>
                    </div>
                    <div className="flex items-center space-x-2 p-3 rounded-lg border border-border/50 hover:bg-secondary/50 transition-colors hover-glow">
                      <RadioGroupItem value="pro" id="pro" />
                      <Label htmlFor="pro" className="flex-1 cursor-pointer">
                        <div className="flex justify-between items-center">
                          <span>PRO</span>
                          <span className="text-sm text-muted-foreground">€3/month</span>
                        </div>
                      </Label>
                    </div>
                  </RadioGroup>
                </div>

                {/* WordPress Add-on */}
                <div className="flex items-center space-x-2 p-3 rounded-lg border border-border/50 hover-glow">
                  <Checkbox 
                    id="wordpress" 
                    checked={wordpress}
                    onCheckedChange={(checked) => setWordpress(checked as boolean)}
                  />
                  <Label htmlFor="wordpress" className="flex-1 cursor-pointer">
                    <div className="flex justify-between items-center">
                      <span>WordPress (+€1/month)</span>
                    </div>
                  </Label>
                </div>

                {/* Full Name */}
                <div className="space-y-2">
                  <Label htmlFor="fullName">Full Name *</Label>
                  <Input
                    id="fullName"
                    value={fullName}
                    onChange={(e) => setFullName(e.target.value)}
                    placeholder="Enter your full name"
                    required
                  />
                </div>

                {/* Email */}
                <div className="space-y-2">
                  <Label htmlFor="email">Email *</Label>
                  <Input
                    id="email"
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="Enter your email"
                    required
                  />
                </div>

                {/* Duration */}
                <div className="space-y-2">
                  <Label>Duration *</Label>
                  <Select value={duration} onValueChange={setDuration}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select duration" />
                    </SelectTrigger>
                    <SelectContent>
                      {Array.from({ length: 12 }, (_, i) => i + 1).map((month) => (
                        <SelectItem key={month} value={month.toString()}>
                          {month} month{month > 1 ? "s" : ""}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Terms */}
                <div className="flex items-center space-x-2">
                  <Checkbox 
                    id="terms" 
                    checked={acceptTerms}
                    onCheckedChange={(checked) => setAcceptTerms(checked as boolean)}
                  />
                  <Label htmlFor="terms" className="text-sm cursor-pointer">
                    I agree to the{" "}
                    <a 
                      href="https://discord.gg/qWZASwxuMj" 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="text-primary hover:underline inline-flex items-center gap-1"
                    >
                      TimRodina.online terms
                      <ExternalLink size={12} />
                    </a>
                  </Label>
                </div>

                {/* Order Summary */}
                {duration && (
                  <div className="p-4 bg-secondary/50 rounded-lg animate-on-scroll hover-glow">
                    <h3 className="font-semibold mb-2">Order Summary</h3>
                    <div className="space-y-1 text-sm">
                      <div className="flex justify-between">
                        <span>Plan ({plan}):</span>
                        <span>€{plan === "pro" ? 3 : 2}/month</span>
                      </div>
                      {wordpress && (
                        <div className="flex justify-between">
                          <span>WordPress:</span>
                          <span>€1/month</span>
                        </div>
                      )}
                      <div className="flex justify-between">
                        <span>Duration:</span>
                        <span>{duration} month{parseInt(duration) > 1 ? "s" : ""}</span>
                      </div>
                      <div className="border-t border-border/50 pt-2 mt-2">
                        <div className="flex justify-between font-semibold">
                          <span>Total:</span>
                          <span>€{calculateTotal()}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                <Button 
                  type="submit" 
                  className="w-full bg-gradient-to-r from-primary to-accent hover-scale"
                  disabled={loading}
                >
                  {loading ? "Processing..." : "Submit Order"}
                </Button>
              </form>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default OrderForm;