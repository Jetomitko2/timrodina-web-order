import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import { Resend } from "npm:resend@2.0.0";

const resend = new Resend(Deno.env.get("RESEND_API_KEY"));

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
};

interface StatusEmailRequest {
  status: 'online' | 'offline' | 'maintenance';
  reason?: string;
}

const getEmailTemplate = (status: string, reason?: string) => {
  const baseStyles = `
    <style>
      .container { max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; }
      .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }
      .content { background: #f8f9fa; padding: 30px; }
      .status-badge { display: inline-block; padding: 8px 16px; border-radius: 20px; font-weight: bold; margin: 15px 0; }
      .online { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
      .offline { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
      .maintenance { background: #fff3cd; color: #856404; border: 1px solid #ffeaa7; }
      .footer { background: #343a40; color: white; padding: 20px; text-align: center; }
      .button { background: #667eea; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block; margin: 15px 0; }
    </style>
  `;

  if (status === 'online') {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>Webhosting je online</title>
        ${baseStyles}
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üü¢ Webhosting je online</h1>
          </div>
          <div class="content">
            <div class="status-badge online">‚úÖ ONLINE</div>
            <h2>Va≈°e str√°nky funguj√∫ bez probl√©mov!</h2>
            <p>Dobr√° spr√°va! V√°≈° webhosting je plne funkƒçn√Ω a va≈°e webstr√°nky funguj√∫ bez ak√Ωchkoƒævek probl√©mov.</p>
            <p>M√¥≈æete pokraƒçova≈• v norm√°lnom pou≈æ√≠van√≠ va≈°ich webstr√°nok.</p>
            <div style="margin-top: 30px; padding: 20px; background: white; border-left: 4px solid #28a745; border-radius: 4px;">
              <strong>Status:</strong> V≈°etky slu≈æby funguj√∫ norm√°lne<br>
              <strong>Dostupnos≈•:</strong> 100%<br>
              <strong>Posledn√° aktualiz√°cia:</strong> ${new Date().toLocaleString('sk-SK')}
            </div>
          </div>
          <div class="footer">
            <p>TimRodina.online Team<br>
            <small>Ak m√°te ak√©kolv ot√°zky, nev√°hajte n√°s kontaktova≈•.</small></p>
          </div>
        </div>
      </body>
      </html>
    `;
  }

  if (status === 'offline') {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>Webhosting je offline</title>
        ${baseStyles}
      </head>
      <body>
        <div class="container">
          <div class="header" style="background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);">
            <h1>üî¥ Webhosting je offline</h1>
          </div>
          <div class="content">
            <div class="status-badge offline">‚ùå OFFLINE</div>
            <h2>Va≈°e webstr√°nky moment√°lne nefunguj√∫</h2>
            <p>Ospravedl≈àujeme sa, ale v√°≈° webhosting je moment√°lne nedostupn√Ω z nasledovn√©ho d√¥vodu:</p>
            <div style="margin: 20px 0; padding: 20px; background: white; border-left: 4px solid #dc3545; border-radius: 4px;">
              <strong>D√¥vod:</strong> ${reason || 'Technick√© probl√©my'}
            </div>
            <p>Pracujeme na odstr√°nen√≠ probl√©mu a hneƒè ako bude webhosting op√§≈• funkƒçn√Ω, d√°me v√°m vedie≈•.</p>
            <p><strong>Odhad opravy:</strong> ƒåo najsk√¥r</p>
            <div style="margin-top: 30px; padding: 20px; background: #fff3cd; border-left: 4px solid #ffc107; border-radius: 4px;">
              <strong>‚ö†Ô∏è ƒåo to znamen√°:</strong><br>
              ‚Ä¢ Va≈°e webstr√°nky s√∫ doƒçasne nedostupn√©<br>
              ‚Ä¢ E-maily m√¥≈æu by≈• tie≈æ ovplyvnen√©<br>
              ‚Ä¢ V≈°etky d√°ta s√∫ v bezpeƒç√≠<br>
              ‚Ä¢ Okam≈æite v√°s informujeme o obnoven√≠ slu≈æby
            </div>
          </div>
          <div class="footer">
            <p>TimRodina.online Team<br>
            <small>ƒéakujeme za va≈°u trpezlivos≈• a porozumenie.</small></p>
          </div>
        </div>
      </body>
      </html>
    `;
  }

  if (status === 'maintenance') {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>Webhosting sa prer√°ba</title>
        ${baseStyles}
      </head>
      <body>
        <div class="container">
          <div class="header" style="background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);">
            <h1>üîß Webhosting sa prer√°ba</h1>
          </div>
          <div class="content">
            <div class="status-badge maintenance">‚ö†Ô∏è √öDR≈ΩBA</div>
            <h2>Prebiehaj√∫ √∫dr≈æb√°rske pr√°ce</h2>
            <p>Informujeme v√°s, ≈æe na va≈°om webhostingu pr√°ve prebieha √∫dr≈æba a aktualiz√°cie.</p>
            <div style="margin: 20px 0; padding: 20px; background: white; border-left: 4px solid #ffc107; border-radius: 4px;">
              <strong>üìã ƒåo m√¥≈æete oƒçak√°va≈•:</strong><br>
              ‚Ä¢ Webstr√°nky by mali fungova≈• norm√°lne<br>
              ‚Ä¢ Admin panel / dashboard m√¥≈æe by≈• dostupn√Ω<br>
              ‚Ä¢ Odpor√∫ƒçame nevykon√°va≈• d√¥le≈æit√© zmeny<br>
              ‚Ä¢ Niektor√© zmeny sa m√¥≈æu neulo≈æi≈• spr√°vne
            </div>
            <div style="margin-top: 20px; padding: 20px; background: #e7f3ff; border-left: 4px solid #0066cc; border-radius: 4px;">
              <strong>üí° Na≈°e odpor√∫ƒçanie:</strong><br>
              Poƒças √∫dr≈æby odpor√∫ƒçame nevykon√°va≈• ≈æiadne d√¥le≈æit√© √∫pravy na va≈°ich webstr√°nkach, 
              preto≈æe existuje riziko, ≈æe sa zmeny neulo≈æia spr√°vne.
            </div>
            <p>√ödr≈æba by mala by≈• dokonƒçen√° ƒçoskoro. ƒéakujeme za pochopenie.</p>
          </div>
          <div class="footer">
            <p>TimRodina.online Team<br>
            <small>Pracujeme na zlep≈°en√≠ na≈°ich slu≈æieb pre v√°s.</small></p>
          </div>
        </div>
      </body>
      </html>
    `;
  }

  return '';
};

const handler = async (req: Request): Promise<Response> => {
  console.log("Status email function called");
  
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { status, reason }: StatusEmailRequest = await req.json();
    console.log("Request data:", { status, reason });

    // Create Supabase client
    const supabase = createClient(
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? ""
    );

    // Get all paid orders to get customer emails
    const { data: orders, error } = await supabase
      .from("orders")
      .select("email, full_name")
      .eq("is_paid", true);

    if (error) {
      console.error("Error fetching orders:", error);
      throw error;
    }

    console.log("Found paid orders:", orders?.length);

    if (!orders || orders.length === 0) {
      return new Response(
        JSON.stringify({ message: "No paid orders found" }),
        {
          status: 200,
          headers: { "Content-Type": "application/json", ...corsHeaders },
        }
      );
    }

    // Get unique emails
    const uniqueEmails = [...new Set(orders.map(order => order.email))];
    console.log("Unique emails to send to:", uniqueEmails.length);

    // Prepare email content
    const subjects = {
      online: "‚úÖ Webhosting je online - Va≈°e str√°nky funguj√∫",
      offline: "üî¥ Webhosting je offline - Doƒçasn√° nedostupnos≈•",
      maintenance: "üîß Webhosting sa prer√°ba - √ödr≈æb√°rske pr√°ce"
    };

    const htmlContent = getEmailTemplate(status, reason);

    // Send emails to all customers
    const emailPromises = uniqueEmails.map(async (email) => {
      console.log("Sending email to:", email);
      return resend.emails.send({
        from: "TimRodina Status <status@timrodina.online>",
        to: [email],
        subject: subjects[status],
        html: htmlContent,
      });
    });

    const results = await Promise.allSettled(emailPromises);
    
    // Count successful sends
    const successful = results.filter(result => result.status === 'fulfilled').length;
    const failed = results.filter(result => result.status === 'rejected').length;

    console.log(`Email sending complete: ${successful} successful, ${failed} failed`);

    // Log any failures
    results.forEach((result, index) => {
      if (result.status === 'rejected') {
        console.error(`Failed to send email to ${uniqueEmails[index]}:`, result.reason);
      }
    });

    return new Response(
      JSON.stringify({ 
        message: "Status emails sent",
        successful,
        failed,
        totalEmails: uniqueEmails.length
      }),
      {
        status: 200,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
    
  } catch (error: any) {
    console.error("Error in send-status-email function:", error);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
};

serve(handler);